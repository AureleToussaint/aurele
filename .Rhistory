for (nmB in sitenm){
tab<-t(as.matrix(as.data.frame(plant_sp[site==nmB,.N,c("Species")])  ))
tab2<-as.numeric(tab[2,])
names(tab2)<-tab[1,]
x<-tab2
# calcul of observed ChaoEstropy
x <- x[x > 0]
n <- sum(x)
p <- x/sum(x)
f1 <- sum(x == 1)
f2 <- sum(x == 2)
f0.hat <- ifelse(f2 == 0, (n - 1)/n * f1 * (f1 -1)/2, (n - 1)/n * f1^2/2/f2)
A <- ifelse(f1 > 0, n * f0.hat/(n * f0.hat + f1),1)
Chat <- 1 - f1/n*A
f0 <- max(round(f0.hat), 1)
z <- qnorm(1 - (1 - conf)/2)
# Bootstrapping
lambda <- (1 - Chat) / sum(x / n * (1 - x / n)^n)
pi <- x / n * (1 - lambda * (1 - x /n)^n)
pi.star <- c(pi, rep((1 - Chat) / f0, f0))
if(!(is.na(pi.star))){
X <- rmultinom(nboot, n, pi.star)
X_est<-apply(X, 2, function(y) exp(ChaoEntropyEstFun(y)))
se <- sd(X_est)
# Results
obs <- exp(-sum(p * log(p)))
est <- exp(ChaoEntropyEstFun(x))
CI <- c(max(est - z * se, obs), est + z * se)
out <- round(t(c(obs, est, se, CI)), 3)
out <- data.frame(out)
colnames(out) <- c("Observed", "Estimator", "Est_s.e",
paste(conf * 100, "% Lower", sep = ""), paste(conf * 100, "% Upper", sep = ""))
plant_est[nmB,]<-c(n,as.matrix(out)[1,])
plants_est_raw[nmB,]<-c(est,X_est)
}
setTxtProgressBar(p_b, i)
i<-1+i
}
# coordinates
nae_db<-cbind(lon=lon_db,lat=lat_db)
nae_db<-nae_db[order(rownames(nae_db)),]
if(is.null(dim(all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),]))){
lat_sub<-lat_all[all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),][1]]
lon_sub<-lon_all[all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),][1]]
}else{
lat_sub<-lat_all[rownames(all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),])]
lon_sub<-lon_all[rownames(all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),])]
}
# GAM
rdat<-plants_est_raw[,-1]
nb_tours <- nboot
p_b <- txtProgressBar(min = 1, max = nb_tours, style = 3)
for (rd in 1:nboot){
setTxtProgressBar(p_b, rd)
rich.est<-log(rdat[,rd])
latitu<-lat_db[names(rich.est)]
longitu<-lon_db[names(rich.est)]
pr60=gam(rich.est~s(latitu,longitu,bs="sos",k=100))
wrld<-pred.plot3(rich.est,latitu,longitu,lat_sub,lon_sub,title=NULL,sizeplot=F,matrix=T,k=100,n=100,legend.cex=1)[,3]
if(rd==1){world_all_rd=wrld}else{world_all_rd<-cbind(world_all_rd,wrld)}
setTxtProgressBar(p_b, rd)
}
world_all<-world_all_rd ; colnames(world_all)<-paste0("GAM_Boot",1:ncol(world_all_rd)) ; rownames(world_all)<-names(lat_sub)
boot_all<-rbind(plants_est_raw[,-1],exp(world_all))
# Summarize results
sites<-matrix(NA,nc=1008,nr=nrow(rec_plant_all))
rownames(sites)<-rownames(nae_db)
colnames(sites)<-c("Longitude","Latitude","Records","rich.obs","rich.est","rich.est.cip","rich.est.cim","rich.est.sd",paste0("Boot",1:1000))
sites[,c("Longitude","Latitude")] <- nae_db[rownames(sites),]
sites[,c("Records")] <-as.numeric(as.matrix(rec_plant_all[rownames(sites),2])[,1])
sites[,c("rich.obs")] <- as.numeric(as.matrix(rich_plant_all[rownames(sites),"V1"])[,1])
sites[,paste0("Boot",1:1000)] <- boot_all[rownames(sites),]
sites[rownames(plant_est),c("rich.est")] <- plant_est[,"Estimator"]
sites[rownames(plant_est),c("rich.est.cip")] <- plant_est[,"95% Upper"]
sites[rownames(plant_est),c("rich.est.cim")] <- plant_est[,"95% Lower"]
sites[rownames(plant_est),c("rich.est.sd")] <- plant_est[,"Est_s.e"]
if(length(sites[which(sites[,"Records"] == 0),"rich.est"])==1){
sites[which(sites[,"Records"] == 0),"rich.est"]<-mean(sites[which(sites[,"Records"] == 0),paste0("Boot",1:1000)])
sites[which(sites[,"Records"] == 0),"rich.est.sd"]<-sd(sites[which(sites[,"Records"] == 0),paste0("Boot",1:1000)])
}else{
sites[which(sites[,"Records"] == 0),"rich.est"]<-apply( sites[which(sites[,"Records"] == 0),paste0("Boot",1:1000)],1,mean )
sites[which(sites[,"Records"] == 0),"rich.est.sd"]<-apply( sites[which(sites[,"Records"] == 0),paste0("Boot",1:1000)],1,sd )
}
if(Gam_calc==T){
# GAM
rdat<-plants_est_raw[,-1]
nb_tours <- nboot
p_b <- txtProgressBar(min = 1, max = nb_tours, style = 3)
for (rd in 1:nboot){
rich.est<-log(rdat[,rd])
latitu<-lat_db[names(rich.est)]
longitu<-lon_db[names(rich.est)]
pr60=gam(rich.est~s(latitu,longitu,bs="sos",k=100))
lat_all=latitu
lon_all=longitu
wrld<-pred.plot3(rich.est,latitu,longitu,lat_all,lon_all,title=NULL,sizeplot=F,matrix=T,k=100,n=100,legend.cex=1)[,3]
if(rd==1){world_all_rd=wrld}else{world_all_rd<-cbind(world_all_rd,wrld)}
setTxtProgressBar(p_b, rd)
}
world_all<-world_all_rd ; colnames(world_all)<-paste0("GAM_Boot",1:ncol(world_all_rd))
world_all_1<-world_all[which(rownames(world_all)%in%rownames(sites)),]
sites<-cbind(sites,matrix(NA,nc=ncol(world_all_1),nr=nrow(sites)))
colnames(sites)[-c(1:1008)]<-paste0("GAM_Boot",1:ncol(world_all_rd))
sites[rownames(world_all_1),paste0("GAM_Boot",1:ncol(world_all_rd))]<-world_all_1
}
print(plin)
return(sites)
}
esti_rec_plant<-function(name_in,plant,plants_my,lon_all,lat_all,nbt=10000){
typ<-c("AM","ECM","ERM","NM","ORM")
tax_AM<-as.character(plants_my[which(plants_my$Species %in% plants_my$Species[which(plants_my$categ == "AM")]),]$Species)
tax_ECM<-as.character(plants_my[which(plants_my$Species %in% plants_my$Species[which(plants_my$categ == "ECM")]),]$Species)
tax_ERM<-as.character(plants_my[which(plants_my$Species %in% plants_my$Species[which(plants_my$categ == "ERM")]),]$Species)
tax_NM<-as.character(plants_my[which(plants_my$Species %in% plants_my$Species[which(plants_my$categ == "NM")]),]$Species)
tax_ORM<-as.character(plants_my[which(plants_my$Species %in% plants_my$Species[which(plants_my$categ == "ORM")]),]$Species)
# parameters
set.seed(1234)
q=0
datatype = "abundance"
knots = 40
se = TRUE
conf = 0.95
nboot = nbt
# data
lon_db<-lon_all
lat_db<-lat_all
plant_bis<-plant
plant_sp_all<-plant_bis
all_site<-as.character(unique(plant[,site]))
all_site_n<-cbind(all_site,0) ; rownames(all_site_n)<-all_site
plant_sp_all<-plant_sp_all[site%in%names(lon_all),]
sitenm<-as.character(unique(plant_sp_all[,.N,.(site)][which(N>19),]$site))
plant_sp<-plant_sp_all[site%in%sitenm,]
# observed record
rec_plant<-plant_sp[,.N,.(site)]
rec_plant<-as.data.frame(rec_plant) ; rownames(rec_plant)<-rec_plant[,1]
if(dim(as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rec_plant)),]))[2]==1){
ss<-data.frame(as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rec_plant)),])[1,1],as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rec_plant)),])[2,1])
rec_plant_all<-as.data.frame( rbindlist( list( rec_plant,ss ) ) )
rownames(rec_plant_all)<-rec_plant_all[,1]
}else{
rec_plant_all<-as.data.frame( rbindlist( list( rec_plant,as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rec_plant)),]) ) ) )
rownames(rec_plant_all)<-rec_plant_all[,1]
}
# observed richness
rich_plant<-plant_sp[,length(unique(Species)),.(site)]
rich_plant<-as.data.frame(rich_plant) ; rownames(rich_plant)<-rich_plant[,1]
if(dim(as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),]))[2]==1){
ss<-data.frame(as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),])[1,1],as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),])[2,1])
rich_plant_all<-as.data.frame(rbindlist(list(rich_plant,ss)))
rownames(rich_plant_all)<-rich_plant_all[,1]
}else{
rich_plant_all<-as.data.frame(rbindlist(list(rich_plant,as.data.frame(all_site_n[!(rownames(all_site_n)%in%rownames(rich_plant)),]))))
rownames(rich_plant_all)<-rich_plant_all[,1]
}
# estimated richness for the site with 20 or more records
plant_count<-list()
k<-1
nb_tours <- length(sitenm)
p_b <- txtProgressBar(min = k, max = nb_tours, style = 3)
for (nmB in sitenm){
plant_count[[k]]<-matrix(NA,nr=6,nc=length(paste("Boot_rec",1:nboot, sep = ""))) ; rownames(plant_count[[k]])<-c(typ,"all")
colnames(plant_count[[k]])<-paste("Boot_rec",1:nboot, sep = "")
tab<-t(as.matrix(as.data.frame(plant_sp[site==nmB,.N,c("Species")])  ))
tab2<-as.numeric(tab[2,])
names(tab2)<-tab[1,]
tab2<-tab2[which(names(tab2)%in%plants_my$Species)]
for (type in typ){
eval(parse(text=paste(type,"_s<-sum(tab2[names(tab2)%in%tax_",type,"])",sep="")))
eval(parse(text=paste("resample_",type,"<-NULL",sep="")))
}
all_s<-sum(c(AM_s,ECM_s,ERM_s,ERM_s,NM_s,ORM_s))
resample_all<-NULL
for (i in 1:nboot){
resample<-sample(tab2,replace=T)
for (type in typ){
eval(parse(text=paste("resample_",type," <- c(resample_",type,",sum(resample[names(resample)%in%tax_",type,"]))",sep="")))
}
resample_all<-c(resample_all,sum(c(resample_AM[i],resample_ECM[i],resample_ERM[i],resample_ERM[i],resample_NM[i],resample_ORM[i])))
}
for (type in typ){
eval(parse(text=paste("plant_count[[k]]['",type,"',] <- resample_",type,"[1:nboot]",sep="")))
}
plant_count[[k]]["all",]<-resample_all[1:nboot]
setTxtProgressBar(p_b, k)
k<-1+k
}
names(plant_count)<-sitenm
return(plant_count)
}
setwd(dir = "/Users/aurele/Desktop/test10/data")
load("plants_clean_18.R")
load("sel_data.R")
plant<-res_site_u[site%in%sel_data,]
AMF = read.table("AMF_1000.txt",h=T) ; AMF=AMF[sel_data,]
EM = read.table("ECM_1000.txt",h=T) ;EM<-EM[sel_data,]
plants_my<-read.csv("GBIF_plants_2017.csv",sep=";")
load("plant30.R")
for (plin in name_in){
db_plt_tps<-esti_plant(plin=plin,plant30,plants_my,lon_all,lat_all,Gam_calc=F)
eval(parse(text=paste("write.table(db_plt_tps,file='plant_",plin,"_30_2018_1000.txt')",sep="")))
}
setwd(dir = "/Users/aurele/Desktop/test10/data")
load("plants_clean_18.R")
load("sel_data.R")
plant<-res_site_u[site%in%sel_data,]
AMF = read.table("AMF_1000.txt",h=T) ; AMF=AMF[sel_data,]
EM = read.table("ECM_1000.txt",h=T) ;EM<-EM[sel_data,]
plants_my<-read.csv("GBIF_plants_2017.csv",sep=";")
plants_my<-cbind.data.frame(plants_my,categ=rep(NA,nrow(plants_my)))
plants_my[which(plants_my$Phylogenetic.mycorrhizal.type %in% c("AM","NM-AM","AM-ECM")),"categ"]<-"AM"
plants_my[which(plants_my$Phylogenetic.mycorrhizal.type %in% c("ECM","NM-ECM")),"categ"]<-"ECM"
plants_my[which(plants_my$Phylogenetic.mycorrhizal.type == "ORM"),"categ"]<-"ORM"
plants_my[which(plants_my$Phylogenetic.mycorrhizal.type == "ERM"),"categ"]<-"ERM"
plants_my[which(plants_my$Phylogenetic.mycorrhizal.type == "NM"),"categ"]<-"NM"
plants_my<-data.table(plants_my)
lon_all<-AMF[,2] ; names(lon_all)<-rownames(AMF)
lat_all<-AMF[,1] ; names(lat_all)<-rownames(AMF)
sp_com<-unique(plant$Species)
name_in<-c("all",names(table(plants_my[,"categ"])))
load("plant30.R")
for (plin in name_in){
db_plt_tps<-esti_plant(plin=plin,plant30,plants_my,lon_all,lat_all,Gam_calc=F)
eval(parse(text=paste("write.table(db_plt_tps,file='plant_",plin,"_30_2018_1000.txt')",sep="")))
}
########################################################
# Script databases of plants
# A.Toussaint (PhD)
# 2018
rm(list=ls())
#########################################################
# REQUIRE LIBRARY
#########################################################
library(devtools)
library(iNEXT)
library(ggplot2)
library(ade4)
library(data.table)
library(sp)
library(spatialEco)
library(FD)
library(StatMatch)
library(gower)
#########################################################
# FUNCTIONS
#########################################################
load("/Volumes/DataPerso/biogeo_fungiplant/functions/niceplot")
source("/Volumes/DataPerso/Correl_PlantFish/Script/melodic_rao.R")
inext.est=function(tab,lim=10,q=1,nboot=1) {
richness.inext=NULL
x=as.numeric(tab)
inext<-iNEXT(x,endpoint=lim,nboot=nboot,q=q, datatype="abundance")
resu<-data.frame(Records=sum(x),SR_obs=inext$AsyEst[1,1],SR_est=inext$AsyEst[1,2],SR_Est_s.e=inext$AsyEst[1,3],SR_95Low=inext$AsyEst[1,4],SR_95Upp=inext$AsyEst[1,5],
Sha_obs=inext$AsyEst[2,1],Sha_est=inext$AsyEst[2,2],Sha_Est_s.e=inext$AsyEst[2,3],Sha_95Low=inext$AsyEst[2,4],Sha_95Upp=inext$AsyEst[2,5],
Sim_obs=inext$AsyEst[3,1],Sim_est=inext$AsyEst[3,2],Sim_Est_s.e=inext$AsyEst[3,3],Sim_95Low=inext$AsyEst[3,4],Sim_95Upp=inext$AsyEst[3,5])
return(resu)
}
subX<-function(x){
rec_bas<-x[,.N,.(BasinName)]
sub_20<-x[BasinName %in% as.character(rec_bas[N>20,BasinName]), ]
return(sub_20)
}
subX_fi<-function(x){
rec_bas<-x[,length(Genus.Species),.(BasinName)]
sub_20<-x[BasinName %in% as.character(rec_bas[V1>5,BasinName]), ]
return(sub_20)
}
esti_plant<-function(plin,plant,plants_my,lon_all,lat_all,nbt=200){
lon_db<-lon_all
lat_db<-lat_all
if(plin == "all"){
plant_bis<-plant
plant_sp<-plant_bis
}else{
tax_sp<-plants_my[which(plants_my$Species %in% plants_my$Species[which(plants_my$categ == plin)]),]$Species
plant_bis<-plant[Species%in%tax_sp,]
plant_sp<-plant_bis
}
plant_sp<-plant_sp[site%in%names(lon_all),]
sitenm<-as.character(unique(plant_sp[,.N,.(site)][which(N>19),]$site))
plant_sp<-plant_sp[site%in%sitenm,]
# observed record
rec_plant<-plant_sp[,.N,.(site)]
rec_plant<-as.data.frame(rec_plant) ; rownames(rec_plant)<-rec_plant[,1]
# observed richness
rich_plant<-plant_sp[,length(unique(Species)),.(site)]
rich_plant<-as.data.frame(rich_plant) ; rownames(rich_plant)<-rich_plant[,1]
# estimated richness
plant_est<-matrix(NA,nr=length(sitenm),nc=19) ; rownames(plant_est)<-sitenm
colnames(plant_est)<-c("Records","SR_obs","SR_est","SR_Est_s.e","SR_Est_SD","SR_95Low","SR_95Upp","Sha_obs","Sha_est","Sha_Est_s.e","Sha_Est_SD","Sha_95Low",
"Sha_95Upp","Sim_obs","Sim_est","Sim_Est_s.e","Sim_Est_SD","Sim_95Low","Sim_95Upp")
nbt<-nbt
i<-1
world_mu<-vector("list", nbt)
world_mu<-lapply(world_mu,function(x){matrix(NA,nc=1,nr=length(sitenm),dimnames = list(sitenm,"Sha_est"))})
for (nmB in sitenm){
tab<-t(as.matrix(as.data.frame(plant_sp[site==nmB,.N,c("Species")])  ))
tab2<-as.numeric(tab[2,])
names(tab2)<-tab[1,]
if(length(tab2)>1){
bstrp<-NULL
for (b in 1:nbt){
bstrp<-rbind(bstrp,sample(tab2,length(tab2),replace=T))
}
bs_exe<-apply(bstrp,1,inext.est)
ine_a<-matrix(unlist(bs_exe),ncol=16,nr=nbt,byrow = T)
colnames(ine_a)<-colnames(bs_exe[[1]])
ine_b<-apply(ine_a,2,mean)
plant_est[nmB,names(ine_b)]<-ine_b
plant_est[nmB,c("SR_Est_SD","Sha_Est_SD","Sim_Est_SD")]<-apply(ine_a[,c("SR_est","Sha_est","Sim_est")],2,sd)
for (k in 1:length(ine_a[,"Sha_est"])){
world_mu[[k]][nmB,1]<-ine_a[k,"Sha_est"]
}
}
cat(paste0("\r",round((i/length(sitenm))*100,2)," %\r"))
i<-1+i
}
# GAM estimated richness
nae_db<-cbind(lon=lon_db[sitenm],lat=lat_db[sitenm])
nae_db<-nae_db[order(rownames(nae_db)),]
nae_db2<-nae_db
rownames(nae_db2)<-paste(round(nae_db[,1]),round(nae_db[,2]))
ktest<-30
for (rd in 1:length(world_mu)){
rich.est<-log(world_mu[[rd]])
latitu<-lat_db[rownames(rich.est)]
longitu<-lon_db[rownames(rich.est)]
wrld<-pred.plot2(rich.est,latitu,longitu,title=NULL,sizeplot=F,matrix=T,k=30,n=100,legend.cex=1)[,3]
if(rd==1){world_all_rd=wrld}else{world_all_rd<-cbind(world_all_rd,wrld)}
}
world_all<-cbind(mean=apply(world_all_rd,1,mean),sd=apply(world_all_rd,1,sd))
# Summarize results
sites<-cbind(nae_db,records=rec_plant[rownames(nae_db),2],
rich.obs=log(plant_est[rownames(nae_db),"SR_obs"]),
sr.est=log(plant_est[rownames(nae_db),"SR_est"]),
sr.est.sd=log(plant_est[rownames(nae_db),"SR_Est_SD"]),
sr.est.se=log(plant_est[rownames(nae_db),"SR_Est_s.e"]),
sr.est.cip=log(plant_est[rownames(nae_db),"SR_95Low"]),
sr.est.cim=log(plant_est[rownames(nae_db),"SR_95Upp"]),
sha.obs=log(plant_est[rownames(nae_db),"Sha_obs"]),
rich.est=log(plant_est[rownames(nae_db),"Sha_est"]),
rich.est.sd=log(plant_est[rownames(nae_db),"Sha_Est_SD"]),
rich.est.se=log(plant_est[rownames(nae_db),"Sha_Est_s.e"]),
rich.est.cip=log(plant_est[rownames(nae_db),"Sha_95Low"]),
rich.est.cim=log(plant_est[rownames(nae_db),"Sha_95Upp"]),
sim.obs=log(plant_est[rownames(nae_db),"Sim_obs"]),
rich.sim=log(plant_est[rownames(nae_db),"Sim_est"]),
rich.sim.sd=log(plant_est[rownames(nae_db),"Sim_Est_SD"]),
rich.sim.se=log(plant_est[rownames(nae_db),"Sim_Est_s.e"]),
rich.sim.cip=log(plant_est[rownames(nae_db),"Sim_95Low"]),
rich.sim.cim=log(plant_est[rownames(nae_db),"Sim_95Upp"]),
rich.gam=world_all[rownames(nae_db),1],
rich.gam.sd=world_all[rownames(nae_db),2])
rownames(sites)<-rownames(nae_db)
print(plin)
return(sites)
}
calc.FD.tax<-function(fish_sp,plants_sp,fungi_sp,do_fish=T,do_plant=T,do_fungi=T){
fish_sam<-fish_sp
plants_sam<-plants_sp
fungi_sam<-fungi_sp
if (do_fish==T){
fish_ab<-matrix(rep(1,nrow(fish_sam)),nr=1,nc=nrow(fish_sam))
colnames(fish_ab)<-t(as.data.frame(fish_sam[,"Genus.Species"]))
#traits
FD_fish_tr<-melodic.rao(fish_ab,fish_mat,abundance.weighted=F)
fish_tr<-c(ncol(fish_ab),FD_fish_tr)
names(fish_tr)<-c("NbSp","MPD","SIM")
#groups
for (gr in 1:5){
eval(parse(text=paste('FD_fish_gr<-melodic.rao(fish_ab,as.matrix(fish_mat_',gr,'gr),abundance.weighted=F)',sep='') ))
eval(parse(text=paste0("fish",gr,"gr<-c(ncol(fish_ab),FD_fish_gr)") ))
eval(parse(text=paste0("names(fish",gr,"gr)<-c('NbSp','MPD','SIM')") ))
}
}else{
fish_tr<-rep("NC",3)
names(fish_tr)<-c("NbSp","MPD","SIM")
for (gr in 1:7){
eval(parse(text=paste0("fish",gr,"gr<-fish_tr") ))
}
}
if (do_fungi==T){
rec<-fungi_sam[,.N,.(Fungal_species,New.Guild)]
fungi_ab<-t(as.data.frame(rec[,"N"]))
colnames(fungi_ab)<-t(as.data.frame(rec)[,"Fungal_species"])
fungi_tr<-factor(t(as.data.frame(rec[,c("New.Guild")])))
names(fungi_tr)<-colnames(fungi_ab)
abX<-fungi_ab[,names(na.omit(fungi_tr))]
gower_mat_fun <- gower.dist(fungi_tr)
FD_fungi_tr<-melodic.rao(t(abX),gower_mat_fun,abundance.weighted=F)
fungi_gr<-c(length(abX),FD_fungi_tr)
names(fungi_gr)<-c("NbSp","MPD","SIM")
}else{
fungi_gr<-rep("NC",3)
names(fungi_gr)<-c("NbSp","MPD","SIM")
}
if(do_plant==T){
rec<-na.omit(plants_sam[,.N,.(scientificName,grp)])
plants_ab<-t(as.data.frame(rec[,"N"]))
colnames(plants_ab)<-t(as.data.frame(rec[,"scientificName"]))
plants_grp<-as.data.frame(rec[,c("grp")])
rownames(plants_grp)<-rec$scientificName
nbsp_plants<-nrow(plants_grp)
gower_mat_fun <- as.matrix(gower.dist(factor(plants_grp[,1])))
colnames(gower_mat_fun)<-rownames(gower_mat_fun)<-rec$scientificName
FD_plants_gr<-melodic.rao(plants_ab,gower_mat_fun,abundance.weighted=F)
plant_gr<-c(nbsp_plants,FD_plants_gr)
names(plant_gr)<-c("NbSp","MPD","SIM")
}else{
plant_gr<-rep("NC",3)
names(plant_gr)<-c("NbSp","MPD","SIM")
}
resu_b<-matrix(rbind(fish_tr,fish1gr,fish2gr,fish3gr,fish4gr,fish5gr,plant_gr,fungi_gr),
ncol=3,nr=8,dimnames=list(c("fish_tr",paste0("fish",1:5,"gr"),"plant_gr","fungi_gr"),c("NbSp","MPD","SIM")))
return(resu_b)
}
#########################################################
# Data
#########################################################
plant<-fread("/Volumes/DataPerso/Correl_PlantFish/scriptR_OK/data/plants_18.csv",verbose=T)
fungi<-fread("/Volumes/DataPerso/Correl_PlantFish/scriptR_OK/data/fungi_18.csv",verbose=T)
fish<-fread("/Volumes/DataPerso/Correl_PlantFish/scriptR_OK/data/fish_18.csv",verbose=T)
fish
fungi
plant
# Subselection of river basin with 20 or more records
plant_20<-subX(plant)
fungi_20<-subX(fungi)
fish_20<-subX_fi(fish)
plant_sub
# Estimation of the functional diversity
plant_sub<-plant_20[BasinName%in%bas_all,]
# Combine basin
bas_all<-intersect(unique(plant_20$BasinName),unique(fungi_20$BasinName))
bas_all<-intersect(bas_all,unique(fish_20$BasinName))
# Estimation of the species richness for plants and fungi
# Estimation of the functional diversity
plant_sub<-plant_20[BasinName%in%bas_all,]
fungi_sub<-fungi_20[BasinName%in%bas_all,]
fish_sub<-fish_20[BasinName%in%bas_all,]
fish_sub
fish_uq<-unique(fish[,-c(1,18)])
dist_fish<-dist(as.data.frame(fish_uq)[,c(7:11)])
gow_fish<-gower.dist(scale(as.data.frame(fish_uq)[,c(7:11)]))
names(gow_fish)<-as.data.frame(fish_uq)[,'Genus.Species']
fish_mat<-as.matrix(gow_fish)
colnames(fish_mat)<-rownames(fish_mat)<-as.data.frame(fish_uq)[,'Genus.Species']
gr<-1
for (gr in 1:5){
gower.mat <- gower.dist(factor(as.data.frame(fish_uq)[,(11+gr)]))
colnames(gower.mat)<-rownames(gower.mat)<-as.data.frame(fish_uq)[,'Genus.Species']
gower.mat<-as.dist(gower.mat)
eval(parse(text=paste('fish_mat_',gr,'gr<-gower.mat',sep='')))
}
nboot<-1000
nm_bas<-bas_all
list.files(path="/Volumes/DataPerso/Correl_PlantFish/data/bootstrap_res"))
list.files(path="/Volumes/DataPerso/Correl_PlantFish/data/bootstrap_res")
basi<-nm_bas[1]
basi
paste0("/Volumes/DataPerso/Correl_PlantFish/data/bootstrap_res/",basi,".RData"
)
load(paste0("/Volumes/DataPerso/Correl_PlantFish/data/bootstrap_res/",basi,".RData"))
res_all
nm_bas
plant_sub
plant_sub[,.N,BasinName]
sort(plant_sub[,.N,BasinName][,2],decreasing=T)
plant_sub[,.N,BasinName][,2]
sort(as.data.frame(plant_sub[,.N,BasinName])[,2],decreasing=T)
as.data.frame(plant_sub[,.N,BasinName])[sort(as.data.frame(plant_sub[,.N,BasinName])[,2],decreasing=T),]
sort(as.data.frame(plant_sub[,.N,BasinName])[,2],decreasing=T)
which(sort(as.data.frame(plant_sub[,.N,BasinName])[,2],decreasing=T))
nm_bas<-as.data.frame(plant_sub[,.N,BasinName])
nm_bas
nm_bas[sort.list(nm_bas[,2],decreasing = T),]
nm_bas[sort.list(nm_bas[,2],decreasing = F),]
nm_bas[sort.list(nm_bas[,2],decreasing = F),1]
nboot<-1000
nm_bas<-as.data.frame(plant_sub[,.N,BasinName])
nm_basOK<-nm_bas[sort.list(nm_bas[,2],decreasing = F),1]
for (basi in nm_basOK){
if(!(paste0(basi,".RData") %in% list.files(path="/Volumes/DataPerso/Correl_PlantFish/data/bootstrap_res"))){
t_deb<-Sys.time()
cat(paste0(basi," start at: ",t_deb,"\n"))
fish_sp<-fish_sub[BasinName==basi,]
plants_sp<-plant_sub[BasinName==basi,]
fungi_sp<-fungi_sub[BasinName==basi,]
obs<-calc.FD.tax(fish_sp,plants_sp,fungi_sp,do_fish=T,do_plant=T,do_fungi=T)
nb_tours <- nboot
p_b <- txtProgressBar(min = 1, max = nb_tours, style = 3)
rd_mat_MPD<-matrix(NA,ncol=nboot,nr=2,dimnames=list(c("plant_gr","fungi_gr"),paste0("Boot",1:nboot)))
rd_mat_SIM<-rd_mat_MPD
for(nb in 1:nboot){
fish_sp_rd<-fish_sp
plants_sp_rd<-plants_sp[sample(1:nrow(plants_sp),replace=T),]
fungi_sp_rd<-fungi_sp[sample(1:nrow(fungi_sp),replace=T),]
rd<-calc.FD.tax(fish_sp_rd,plants_sp_rd,fungi_sp_rd,do_fish=F,do_plant=T,do_fungi=T)
rd_mat_MPD[,nb]<-rd[c(7,8),2]
rd_mat_SIM[,nb]<-rd[c(7,8),3]
setTxtProgressBar(p_b, nb)
}
rd_mat_MPD_t<-rbind(as.numeric(rd_mat_MPD[1,]),as.numeric(rd_mat_MPD[2,]))
rd_mat_SIM_t<-rbind(as.numeric(rd_mat_SIM[1,]),as.numeric(rd_mat_SIM[2,]))
resu_b<-obs
resu_MPD<-rd_mat_MPD_t ; rownames(resu_MPD)<-c("plant_gr","fungi_gr") ; colnames(resu_MPD)<-paste0("Boot",1:nboot)
resu_SIM<-rd_mat_SIM_t ; rownames(resu_SIM)<-c("plant_gr","fungi_gr") ; colnames(resu_SIM)<-paste0("Boot",1:nboot)
res_all<-list(resu_b,resu_MPD,resu_SIM)
save(res_all,file=paste0("/Volumes/DataPerso/Correl_PlantFish/data/bootstrap_res/",basi,".RData"))
cat(paste0(basi,"(",round((which(nm_bas == basi)/length(nm_bas))*100,2),"%) duration: ",round(Sys.time()-t_deb,4),"\n"))
}
}
